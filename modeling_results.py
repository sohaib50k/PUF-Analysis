from numpy import zeros,ones,asarray
import numpy as np
import glob
import cv2
from scipy.spatial import distance
from scipy import ndimage as ndi
import scipy.signal as convolve

def normalize(arr):
    """
    Linear normalization
    http://en.wikipedia.org/wiki/Normalization_%28image_processing%29
    """
    minval = np.amin(arr)
    maxval = np.amax(arr)
    if minval != maxval:
        arr -= minval
        arr *= (255.0/(maxval-minval))
    arr = arr.astype(np.uint8)
    return arr


def gaborConvolve(im):
    ker = [[-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000],      [-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000],          [-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000], [-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000],           [-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000],           [-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000,-0.500000],           [-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000],           [-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000],           [-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,0.500000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000,-0.250000]]

    ker = np.array(ker)

    imC = convolve.convolve2d(im,ker,mode='same',fillvalue = 0,boundary='wrap')

    imC = normalize(imC)
    imC = cv2.resize(imC,(200,200))

    ret2,imC = cv2.threshold(imC,0,np.mean(imC),cv2.THRESH_BINARY+cv2.THRESH_OTSU)
    return imC
